{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Guides Home","text":""},{"location":"#hello-what","title":"Hello~! What?!","text":"<p>Welcome to User Guides, the community driven guidebook for rAthena. This is a place where you can find guides on how to install, configure, and use rAthena. If you have any questions, feel free to ask in the rAthena Forums or our Discord server.</p>"},{"location":"#why-should-i-use-this","title":"Why Should I Use This?","text":"<p>This area of rAthena has been created by the community, for the community. If you have a guide you would like to share with the community, you can submit a pull request to the rAthena User-Guides Repository on GitHub. Due to the nature of how Github Wiki's work (and their access requirements for modifying them), we have decided to move our guides to a repository instead. This will allow us to have more control over the content and have a more streamlined process for submitting and reviewing guides. We hope you enjoy this new format, and we look forward to seeing your contributions!</p>"},{"location":"#what-about-the-old-guides","title":"What About The Old Guides?","text":"<p>Guides that are currently located on the rA Wiki will slowly migrate over to here. If you are looking for a guide that is not yet on this site, you can find it on the rAthena Wiki.</p> <p>There are a multitude of guides available on the forums, too, though many are extremely out-of-date and contain links to dead resources. Their authors may no longer be on the scene, which makes keeping them up-to-date a difficult task. This is why we encourage users to now make their guides available here, where they can be kept up-to-date and easily accessibleby everyone.</p>"},{"location":"#how-do-i","title":"How Do I?...","text":""},{"location":"#how-do-i-use-this","title":"How Do I Use This?","text":"<p>This guidebook is split into several sections for ease-of-use. Simply click around and follow links to where you need to go, or try searching for what you need using the search bar at the top of the page.</p>"},{"location":"#how-do-i-contribute","title":"How Do I Contribute?","text":"<p>If you have a guide you would like to share with the community, you can submit a pull request to the rAthena User-Guides Repository on GitHub. Have a look at our CONTRIBUTING.md file for an in-depth process.</p> <p>If you are unfamiliar with Markdown, you can use StackEdit to write your guide in Markdown, or use the GitHub Markdown Editor to preview your guide as you write it.</p>"},{"location":"#how-do-i-get-help","title":"How Do I Get Help?","text":"<p>If you have any questions about these guides, or feel that any of them need clarifying, feel free to shoot a message into the <code>#user-guides</code> channel on our Discord server.</p>"},{"location":"#how-do-i-use-these-guides-offline","title":"How Do I Use These Guides Offline?","text":"<p>You sure can! Download this package from GitHub, and you will have a copy of all the guides available for offline use. You can also clone the repository using Git, if you prefer.</p>"},{"location":"CONTRIBUTING/","title":"Contributing To These Guides","text":"<p>You'd like to help us improve these guides? Great! We're always looking for new contributors to help us improve our documentation. There are many ways you can contribute, from writing new guides, improving existing guides, or even just fixing typos.</p>"},{"location":"CONTRIBUTING/#what-can-i-contribute","title":"What Can I Contribute?","text":"<p>There are many ways you can contribute to this project. Here are some examples:</p> <ul> <li>Writing new guides</li> <li>Improving existing guides</li> <li>Fixing typos</li> <li>Expanding explanations</li> </ul>"},{"location":"CONTRIBUTING/#how-do-i-contribute","title":"How Do I Contribute?","text":"<p>Contributing to this project is easy. Just follow these steps:</p> <ol> <li>Fork this repository</li> <li>Create a new branch for your changes</li> <li>Make your changes</li> <li>Commit your changes</li> <li>Push your changes to your fork</li> <li>Create a pull request</li> <li>Wait for your changes to be reviewed and merged</li> <li>Celebrate!</li> <li>Repeat steps 2-8 as often as you like</li> </ol>"},{"location":"CONTRIBUTING/#how-should-i-write-my-guide","title":"How Should I Write My Guide?","text":""},{"location":"CONTRIBUTING/#basics","title":"Basics","text":"<p>We have a few guidelines for writing guides. Please follow these guidelines when writing your guide:</p> <ul> <li>Guides should be written in markdown format</li> <li>Guides should be written in a way that is easy to understand</li> <li>Guides should be written in a way that is easy to read</li> <li>Guides should be written in a way that is easy to follow</li> <li>Guides should be written in a way that is easy to translate</li> <li>Guides should be written in a way that is easy to maintain</li> <li>Guides should be written in a way that is easy to update</li> <li>Guides should be written in a way that is easy to expand</li> <li>Guides should be written in a way that is easy to improve</li> <li>That should cover it..</li> </ul>"},{"location":"CONTRIBUTING/#file-location","title":"File Location","text":"<p>The markdown files for guides need to be placed in the <code>/guides/</code> directory. The file name should be the same as the guide title, with all spaces replaced with hyphens. For example, a guide titled \"How To Install rAthena\" would be saved as <code>how-to-install-rathena.md</code>.</p> <p>We have created some directories to help organize the guides. Please place your guide in the appropriate directory. If you are unsure where to place your guide, please ask in our Discord server.</p>"},{"location":"CONTRIBUTING/#markdown-guidelines","title":"Markdown Guidelines","text":"<p>You can structure your guide any way you see fit, but we do have a few guidelines for writing markdown files to keep everything looks reasonably consistent.</p>"},{"location":"CONTRIBUTING/#headings","title":"Headings","text":"<p>Headings should be used to break up your guide into sections. When you use hashes <code>#</code> to create headings, you should use the following number of hashes for each heading:</p> <ul> <li><code>#</code> - Top level heading (autogen - do not use in your guide)</li> <li><code>##</code> - Second level heading</li> <li><code>###</code> - Third level heading</li> <li><code>####</code> - Fourth level heading</li> </ul> <p>These headings are automatically turned into a table of contents on the guide page. This allows users to quickly jump to the section they are interested in.</p>"},{"location":"CONTRIBUTING/#code-blocks","title":"Code Blocks","text":"<p>Code blocks should be used to display code. You can use code blocks to display commands, code snippets, or even entire files. To create a code block, you can use the following syntax:</p> <pre><code>```text\n# This is a code block\n```\n</code></pre> <p>You can add an optional language identifier to enable syntax highlighting in your code block.</p>"},{"location":"CONTRIBUTING/#inline-code","title":"Inline Code","text":"<p>Inline code should be used to display code that is part of a sentence. To create inline code, you can use the following syntax:</p> <pre><code>`This is inline code`\n</code></pre>"},{"location":"CONTRIBUTING/#links","title":"Links","text":"<p>Links should be used to link to other pages. To create a link, you can use the following syntax:</p> <pre><code>[Link Text](https://example.com)\n</code></pre>"},{"location":"CONTRIBUTING/#images","title":"Images","text":"<p>Images can be used, but we recommend using them sparingly. They should be linked from a permenant hosting solution (not somewhere that deletes images after x days) and should not be pushed to this repository unless absolutely necessary. To display an image, you can use the following syntax:</p> <pre><code>![Image Alt Text](https://example.com/image.png)\n</code></pre>"},{"location":"CONTRIBUTING/#tables","title":"Tables","text":"<p>Tables can be used to display data in a tabular format. To create a table, you can use the following syntax:</p> <pre><code>| Column 1 | Column 2 | Column 3 |\n| -------- | -------- | -------- |\n| Row 1    | Row 1    | Row 1    |\n| Row 2    | Row 2    | Row 2    |\n| Row 3    | Row 3    | Row 3    |\n</code></pre>"},{"location":"CONTRIBUTING/#lists","title":"Lists","text":"<p>Lists can be used to display data in a list format. To create a list, you can use the following syntax:</p> <pre><code>- List Item 1\n- List Item 2\n- List Item 3\n</code></pre>"},{"location":"CONTRIBUTING/#mkdocs-goodies","title":"MkDocs Goodies","text":"<p>Since we are using MkDocs for our documentation, we can take advantage of the plugins and extensions that MkDocs has to offer;</p> AdmonitionsFlowChartsFormattingContent TabsData TablesFootnotesInlineHiliteMark <p>Admonitions, also known as call-outs, are an excellent choice for including side content without significantly interrupting the document flow.</p> <p>Usage</p> <p>Admonitions follow a simple syntax: a block starts with <code>!!!</code>, followed by a single keyword used as a type qualifier. The content of the block follows on the next line, indented by four spaces:</p> Admonition<pre><code>!!! note\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Changing the title</p> <p>By default, the title will equal the type qualifier in titlecase. However, it can be changed by adding a quoted string containing valid Markdown (including links, formatting, ...) after the type qualifier:</p> Admonition with custom title<pre><code>!!! note \"Phasellus posuere in sem ut cursus\"\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Phasellus posuere in sem ut cursus</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Removing the title</p> <p>Similar to [changing the title], the icon and title can be omitted entirely by adding an empty string directly after the type qualifier. Note that this will not work for [collapsible blocks]:</p> Admonition without title<pre><code>!!! note \"\"\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Collapsible blocks</p> <p>When an admonition block is started with <code>???</code> instead of <code>!!!</code>, the admonition is rendered as a collapsible block with a small toggle on the right side:</p> Admonition, collapsible<pre><code>??? note\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Adding a <code>+</code> after the <code>???</code> token renders the block expanded:</p> Admonition, collapsible and initially expanded<pre><code>???+ note\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Inline blocks</p> <p>Admonitions can also be rendered as inline blocks (e.g., for sidebars), placing them to the right using the <code>inline</code> + <code>end</code> modifiers, or to the left using only the <code>inline</code> modifier:</p>  inline end inline <p>Lorem ipsum</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>!!! info inline end \"Lorem ipsum\"\n\n    Lorem ipsum dolor sit amet, consectetur\n    adipiscing elit. Nulla et euismod nulla.\n    Curabitur feugiat, tortor non consequat\n    finibus, justo purus auctor massa, nec\n    semper lorem quam in massa.\n</code></pre> <p>Use <code>inline end</code> to align to the right (left for rtl languages).</p> <p>Lorem ipsum</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>!!! info inline \"Lorem ipsum\"\n\n    Lorem ipsum dolor sit amet, consectetur\n    adipiscing elit. Nulla et euismod nulla.\n    Curabitur feugiat, tortor non consequat\n    finibus, justo purus auctor massa, nec\n    semper lorem quam in massa.\n</code></pre> <p>Use <code>inline</code> to align to the left (right for rtl languages).</p> <p>Important: admonitions that use the <code>inline</code> modifiers must be declared prior to the content block you want to place them beside. If there's insufficient space to render the admonition next to the block, the admonition will stretch to the full width of the viewport, e.g., on mobile viewports.</p> <p>Supported types</p> <p>Following is a list of type qualifiers provided by Material for MkDocs, whereas the default type, and thus fallback for unknown type qualifiers, is <code>note</code>1:</p> <code>note</code> <p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <code>abstract</code> <p>Abstract</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <code>info</code> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <code>tip</code> <p>Tip</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <code>success</code> <p>Success</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <code>question</code> <p>Question</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <code>warning</code> <p>Warning</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <code>failure</code> <p>Failure</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <code>danger</code> <p>Danger</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <code>bug</code> <p>Bug</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <code>example</code> <p>Example</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <code>quote</code> <p>Quote</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Diagrams help to communicate complex relationships and interconnections between different technical components, and are a great addition to project documentation. Material for MkDocs integrates with Mermaid.js, a very popular and flexible solution for drawing diagrams.</p> Flow chart<pre><code>``` mermaid\ngraph LR\nA[Start] --&gt; B{Error?};\nB --&gt;|Yes| C[Hmm...];\nC --&gt; D[Debug];\nD --&gt; B;\nB ----&gt;|No| E[Yay!];\n```\n</code></pre> <p><pre><code>graph LR\nA[Start] --&gt; B{Error?};\nB --&gt;|Yes| C[Hmm...];\nC --&gt; D[Debug];\nD --&gt; B;\nB ----&gt;|No| E[Yay!];</code></pre> </p> <p>Using sequence diagrams Sequence diagrams describe a specific scenario as sequential interactions between multiple objects or actors, including the messages that are exchanged between those actors:</p> Sequence chart<pre><code>``` mermaid\nsequenceDiagram\nautonumber\nAlice-&gt;&gt;John: Hello John, how are you?\nloop Healthcheck\n    John-&gt;&gt;John: Fight against hypochondria\nend\nNote right of John: Rational thoughts!\nJohn--&gt;&gt;Alice: Great!\nJohn-&gt;&gt;Bob: How about you?\nBob--&gt;&gt;John: Jolly good!\n```\n</code></pre> <p><pre><code>sequenceDiagram\nautonumber\nAlice-&gt;&gt;John: Hello John, how are you?\nloop Healthcheck\n    John-&gt;&gt;John: Fight against hypochondria\nend\nNote right of John: Rational thoughts!\nJohn--&gt;&gt;Alice: Great!\nJohn-&gt;&gt;Bob: How about you?\nBob--&gt;&gt;John: Jolly good!</code></pre> </p> <p>Material for MkDocs provides support for several HTML elements that can be used  to highlight sections of a document or apply specific formatting.</p> Text with suggested changes<pre><code>Text can be {--deleted--} and replacement text {++added++}. This can also be\ncombined into {~~one~&gt;a single~~} operation. {==Highlighting==} is also\npossible {&gt;&gt;and comments can be added inline&lt;&lt;}.\n\n{==\n\nFormatting can also be applied to blocks by putting the opening and closing\ntags on separate lines and adding new lines between the tags and the content.\n\n==}\n</code></pre> <p>Text can be deleted and replacement text added. This can also be combined into onea single operation. Highlighting is also possible and comments can be added inline.</p> <p> <p>     Formatting can also be applied to blocks by putting the opening and     closing tags on separate lines and adding new lines between the tags and     the content.     </p> </p> <p>Highlighting text</p> <p>Text can be highlighted with a simple syntax, which is more convenient that directly using the corresponding <code>mark</code>, <code>ins</code> and <code>del</code> HTML tags:</p> Text with highlighting<pre><code>- ==This was marked==\n- ^^This was inserted^^\n- ~~This was deleted~~\n</code></pre> <ul> <li>This was marked</li> <li>This was inserted</li> <li>This was deleted</li> </ul> <p>Sub- and superscripts</p> <p>Text can be sub- and  superscripted with a simple syntax, which is more convenient than directly using the corresponding <code>sub</code> and <code>sup</code> HTML tags:</p> Text with sub- and superscripts<pre><code>- H~2~O\n- A^T^A\n</code></pre> <ul> <li>H2O</li> <li>ATA</li> </ul> <p>Adding Title to Code Bocks</p> <p>Example Code<pre><code>``` markdown title=\"Markdown Title\"\n    Example content\n``` \n</code></pre> <p>Markdown Title<pre><code>    Example content\n</code></pre> </p> <p>Adding keyboard keys</p> <p>Keyboard keys can be rendered with a simple syntax. Consult the Python Markdown Extensions documentation to learn about all available shortcodes:</p> Keyboard keys<pre><code>++ctrl+alt+del++\n</code></pre> <p>Ctrl+Alt+Del</p> <p>Sometimes, it's desirable to group alternative content under different tabs, e.g. when describing how to access an API from different languages or environments.</p> <p>Code blocks are one of the primary targets to be grouped, and can be considered a special case of content tabs, as tabs with a single code block are always rendered without horizontal spacing:</p> Content tabs with code blocks<pre><code>=== \"C\"\n\n    ``` c\n    #include &lt;stdio.h&gt;\n\n    int main(void) {\n    printf(\"Hello world!\\n\");\n    return 0;\n    }\n    ```\n\n=== \"C++\"\n\n    ``` c++\n    #include &lt;iostream&gt;\n\n    int main(void) {\n    std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n    return 0;\n    }\n    ```\n</code></pre> CC++ <pre><code>#include &lt;stdio.h&gt;\nint main(void) {\nprintf(\"Hello world!\\n\");\nreturn 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\nint main(void) {\nstd::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\nreturn 0;\n}\n</code></pre> <p>Grouping other content</p> <p>When a content tab contains more than one code block, it is rendered with horizontal spacing. Vertical spacing is never added, but can be achieved by nesting tabs in other blocks:</p> Content tabs<pre><code>=== \"Unordered list\"\n\n    * Sed sagittis eleifend rutrum\n    * Donec vitae suscipit est\n    * Nulla tempor lobortis orci\n\n=== \"Ordered list\"\n\n    1. Sed sagittis eleifend rutrum\n    2. Donec vitae suscipit est\n    3. Nulla tempor lobortis orci\n</code></pre> Unordered listOrdered list <ul> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ul> <ol> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ol> <p>Embedded content</p> <p>When [SuperFences] is enabled, content tabs can contain arbitrary nested content, including further content tabs, and can be nested in other blocks like [admonitions] or blockquotes:</p> Content tabs in admonition<pre><code>!!! example\n\n    === \"Unordered List\"\n\n        ``` markdown\n        * Sed sagittis eleifend rutrum\n        * Donec vitae suscipit est\n        * Nulla tempor lobortis orci\n        ```\n\n    === \"Ordered List\"\n\n        ``` markdown\n        1. Sed sagittis eleifend rutrum\n        2. Donec vitae suscipit est\n        3. Nulla tempor lobortis orci\n        ```\n</code></pre> <p>Example</p> Unordered ListOrdered List <pre><code>* Sed sagittis eleifend rutrum\n* Donec vitae suscipit est\n* Nulla tempor lobortis orci\n</code></pre> <pre><code>1. Sed sagittis eleifend rutrum\n2. Donec vitae suscipit est\n3. Nulla tempor lobortis orci\n</code></pre> <p>Data tables can be used at any position in your project documentation and can contain arbitrary Markdown, including inline code blocks, as well as [icons and emojis]:</p> Data table<pre><code>| Method      | Description                          |\n| ----------- | ------------------------------------ |\n| `GET`       | :material-check:     Fetch resource  |\n| `PUT`       | :material-check-all: Update resource |\n| `DELETE`    | :material-close:     Delete resource |\n</code></pre> Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource <p>Column alignment</p> <p>If you want to align a specific column to the <code>left</code>, <code>center</code> or <code>right</code>, you can use the [regular Markdown syntax] placing <code>:</code> characters at the beginning and/or end of the divider.</p> LeftCenterRight Data table, columns aligned to left<pre><code>| Method      | Description                          |\n| :---------- | :----------------------------------- |\n| `GET`       | :material-check:     Fetch resource  |\n| `PUT`       | :material-check-all: Update resource |\n| `DELETE`    | :material-close:     Delete resource |\n</code></pre> Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource Data table, columns centered<pre><code>| Method      | Description                          |\n| :---------: | :----------------------------------: |\n| `GET`       | :material-check:     Fetch resource  |\n| `PUT`       | :material-check-all: Update resource |\n| `DELETE`    | :material-close:     Delete resource |\n</code></pre> Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource Data table, columns aligned to right<pre><code>| Method      | Description                          |\n| ----------: | -----------------------------------: |\n| `GET`       | :material-check:     Fetch resource  |\n| `PUT`       | :material-check-all: Update resource |\n| `DELETE`    | :material-close:     Delete resource |\n</code></pre> Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource <p>Footnotes are a great way to add supplemental or additional information to a specific word, phrase or sentence without interrupting the flow of a document. Material for MkDocs provides the ability to define, reference and render footnotes.</p> <p>Adding footnote references</p> <p>A footnote reference must be enclosed in square brackets and must start with a caret <code>^</code>, directly followed by an arbitrary identifier, which is similar to the standard Markdown link syntax.</p> Text with footnote references<pre><code>Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2]\n[^1]: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n[^2]:\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Footnote Example1 dolor sit amet, consectetur adipiscing elit.2</p> <p>InlineHilite is an inline code highlighter inspired by CodeHilite. <pre><code>Here is some code: `#!py3 import pymdownx; pymdownx.__version__`.\n\nThe mock shebang will be treated like text here: ` #!c++ int test = 0; `.\n</code></pre> <p>Here is some code: <code>import pymdownx; pymdownx.__version__</code>.</p> <p>The mock shebang will be treated like text here: <code>#!c++ int test = 0;</code>. </p> <p>Mark adds the ability to insert &lt;mark&gt;&lt;/mark&gt; tags. The syntax requires the text to be surrounded by double equal signs.</p> <p><pre><code>==mark me==\n\n==smart==mark==\n</code></pre> <p>mark me</p> <p>smart==mark </p>"},{"location":"CONTRIBUTING/#testing-your-guide","title":"Testing Your Guide","text":"<p>If you have MkDocs installed, you can test your guide locally by running the following command:</p> <pre><code>mkdocs serve\n</code></pre> <p>This starts a local web server that you can use to view your guide. You can then visit <code>http://localhost:8000</code> in your web browser to view your guide. This is useful for testing links, images, and other formatting.</p>"},{"location":"CONTRIBUTING/#what-happens-next","title":"What Happens Next?","text":"<p>Once you have created your pull request, it will be reviewed by a member of the documentation team or an rA Repository Maintaner. If your pull request is approved, it will be merged into the default (<code>master</code>) branch and after a few moments will be pushed automatically as a HTML file to the Guides website.</p> <p>If your pull request is not approved, you will be given feedback on what needs to be changed before it can be merged.</p> <ol> <li> <p>Footnote Example.\u00a0\u21a9\u21a9</p> </li> <li> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.\u00a0\u21a9</p> </li> </ol>"},{"location":"debugging/","title":"MSVS Debugging","text":"<p>Did you ever see yourself placing <code>ShowDebug</code> everywhere in the code with comments like <code>Been here</code>, <code>If ok</code> and etc, just for trying to understand why your new groundbreaking feature isn't working correctly? The solution is called breakpoints.</p>"},{"location":"debugging/#what-is-debugging","title":"What is debugging?","text":"<p>Simply put, debugging is the ability to put breakpoints in your code and when the server takes that given path it will pause the rest of the execution. This allows you to inspect variable values, evaluate expressions directly on the <code>Immediate Window</code>, and more.</p>"},{"location":"debugging/#video","title":"Video","text":"<p>For the visual learners, I've recorded this video. It's using VS2019 but should work with any version.</p> <p></p>"},{"location":"debugging/#setup","title":"Setup","text":"<ol> <li>Once you have your solution opened with Visual Studio, open up the Solution Explorer and look for a folder called <code>server-components</code>.</li> <li>Then you right click the <code>map-server</code> and select <code>Set as Startup Project</code>.</li> <li>Next you will need to right click the <code>map-server</code> once again and this time open the <code>Properties</code> window.</li> <li>On the left menu, select <code>Debugging</code>. Then on the right side panel, under <code>Work Directory</code>, change to <code>$(SolutionDir)</code></li> <li>Hit apply, then Ok.</li> <li>Compile the solution.</li> <li>Now you should be able to separately start your <code>login-server</code> and <code>char-server</code>.</li> <li>Once these are up, go back to Visual Studio and click the Play button at the top or hit F5 on the keyboard.</li> <li>Go to any function in the <code>map-server</code> source code and put a breakpoint on any line. Trigger that line of code from the client.</li> <li>Your client should now be frozen. The Visual Studio window should have taken the focus and you should see the line you selected/highlighted. You can now inspect the variables (go forward with F10, release with F5, and so on).</li> </ol>"},{"location":"debugging/#tracing-code-path","title":"Tracing code path","text":"<p>Many times we need to know how did we end up in a given code path or method. For that we use the IDE to show us all the references to any given variable, method, etc. Sometimes there are so many calls to what we want to trace it becomes difficult to analyse.</p> <p>This is when breakpoints and the <code>Call Stack</code> window come to place.</p> <p>Once your code is stopped at any breakpoint, you should see at the bottom a window called <code>Call Stack</code>. Those items in the list are from top to bottom, the order of execution the code has taken until the line you put a breakpoint.</p>"},{"location":"debugging/#taking-breakpoints-a-bit-further","title":"Taking breakpoints a bit further","text":"<p>Using breakpoints sometimes can cause some harm, for instance, when you're debugging something that happens very quickly and in rapid succession. You'll have no time of ALT-Tab'ing back and forth between server and client because the server will be always paused on the breakpoint.</p> <p>In that case, you can right-click on a breakpoint and select either <code>Conditions...</code> or <code>Actions...</code>.</p> <ul> <li>Conditions You can choose a condition to trigger the breakpoint. Let's say you want it to stop only when a certain skill is triggered, just put the evaluation there. Eg: <code>md-&gt;skillid == 1234</code>. Note: this is extremely slow.</li> <li>Actions Instead of actually pausing the execution you can use this to execute a piece of code whenever a breakpoint is hit. Rather than having to recompile to add a simple log, you can use this to add logs at will without the impact of the Conditional Breakpoints. In order for the breakpoint not stop the code execution you will need to tick the checkbox right below the text field, something like <code>Continue code execution</code>.</li> </ul>"},{"location":"debugging/#anything-missing","title":"Anything missing?","text":"<p>Should you have any questions, don't hesitate to ask questions at our Discord. We'll be happy to help.</p>"},{"location":"extensions/","title":"Extensions","text":"<p>Here is a small list of currently supported extensions, widgets and apps provided by the rAthena Dev Team.</p>"},{"location":"extensions/#extensions","title":"Extensions","text":""},{"location":"extensions/#visual-studio-code","title":"Visual Studio Code","text":""},{"location":"extensions/#rathena-language-support","title":"rAthena Language Support","text":"<p>Visual Studio Marketplace | GitHub</p> <p>This extension adds syntax highlighting to NPC scripts. Select \"rAthena\" via the Language Mode selector in the bottom right corner of the editor to enable it, or save your NPC scripts with the .rascript extension for automatic detection.</p> <p>This extension was initially ported from JoWei's language-athena for Atom editor and published via VS Marketplace by secretdataz, a member of the rAthena Dev Team. The repository was then archived and is no longer maintained. This extension is now maintained by the rAthena Dev Team.</p>"},{"location":"installing/","title":"General","text":""},{"location":"installing/#containers-and-vms","title":"Containers and VMs","text":"<ul> <li>Docker</li> </ul>"},{"location":"installing/#operating-system","title":"Operating System","text":"<ul> <li>CentOS</li> <li>Ubuntu</li> <li>Debian</li> <li>FreeBSD</li> <li>Windows</li> </ul> <p>Or are you just looking for the MySQL Installation guide?</p>"},{"location":"installing/#recommended-hosting-providers","title":"Recommended Hosting Providers","text":"<ul> <li> <p>DigitalOcean</p> <p>Using our link will give you $200 in free credit to try any of DigitalOcean's services for 60 days.</p> <p>DigitalOcean is a great choice for hosting rAthena. It's cheap, easy to use, and has a great community with many help-topics.</p> </li> <li> <p>OVH</p> <p>OVH is another great choice for hosting rAthena. It's fairly cheap and runs on a robust network.</p> </li> </ul> <p>No one at rAthena will ever recommend a hosting provider that explicitly advertises \"RO Hosting\" packages. They are garbage and should be avoided at all costs.</p>"},{"location":"installing/#optional-clone-information","title":"Optional Clone Information","text":"<p>If you want to have your own forked version but still get updates from the main rAthena repository</p> <ul> <li>Fork this repository to your GitHub account</li> <li> <p>List the current configured remote repository for your fork:</p> <pre><code>git remote -v\n</code></pre> </li> <li> <p>Specify a new remote upstream repository that will be synced with your fork:</p> <pre><code>git remote add upstream https://github.com/rathena/rathena.git\n</code></pre> </li> <li> <p>Verify the new upstream repository you've specified for your fork:</p> <pre><code>git remote -v\n</code></pre> </li> <li> <p>You should see the main rAthena repository as well as your forked repository</p> </li> <li> <p>Now, when you want to get updates from rAthena, simply do:</p> <pre><code>git pull upstream master\n</code></pre> </li> <li> <p>Remember that rAthena falls under GNU GPLv3.</p> </li> </ul>"},{"location":"configuration/imports/","title":"Import Directories","text":"<p>Both the <code>/conf/</code> and <code>/db/</code> directories utilise imports. Th <code>import/</code> directory in either of these locations is used to store your custom settings, so that you can update your server without having to resolve conflicts in the main files. This guide will explain how to use the <code>import/</code> directory to store your custom settings.</p>"},{"location":"configuration/imports/#what-is-the-import-directory-for","title":"What is the import directory for?","text":"<p>The <code>import/</code> directory provides a way for you to change your config settings without the need to even touch the main <code>/conf/</code> and <code>/db/</code> files.</p> <p>By placing your custom entries into the <code>import/</code> directory within these two locations, your core files will not need to have any conflicts resolved when you update your server. You store your changes, and the rest is updated with rAthena.</p>"},{"location":"configuration/imports/#how-does-this-work","title":"How does this work?","text":"<p>Think of \"import\" as in \"override\". Place only the settings you have changed in the import files, or settings you are \"overriding\".</p> <p>For example, when setting up a server there are always a few config settings that users would like to change in order for rAthena to suit their needs. The following example will show you how to use the <code>/conf/import/</code> directory correctly. (for <code>/db/import/</code> examples, see /db/readme.md)</p>"},{"location":"configuration/imports/#login-server","title":"Login Server","text":"<p>We want to use MD5 passwords and disable <code>_m/f</code> account creation methods.</p>"},{"location":"configuration/imports/#confimportlogin_conftxt","title":"/conf/import/login_conf.txt","text":"<pre><code>new_account: no\nuse_MD5_passwords: yes\n</code></pre>"},{"location":"configuration/imports/#char-server","title":"Char Server","text":"<p>We want to change the server name to \"Odin\".</p>"},{"location":"configuration/imports/#confimportchar_conftxt","title":"/conf/import/char_conf.txt","text":"<pre><code>server_name: Odin\n</code></pre>"},{"location":"configuration/imports/#map-server","title":"Map Server","text":"<p>We want to hide all error messages and add a few custom maps.</p>"},{"location":"configuration/imports/#confimportmap_conftxt","title":"/conf/import/map_conf.txt","text":"<pre><code>//Makes server output more silent by omitting certain types of messages:\n//16: Hide Error and SQL Error messages.\nconsole_silent: 16\nmap: 1@toy\nmap: 1@valley\nmap: shops\n</code></pre>"},{"location":"configuration/imports/#inter-server","title":"Inter Server","text":"<p>We want to use MySQL tables instead of .txt files.</p>"},{"location":"configuration/imports/#confimportinter_conftxt","title":"/conf/import/inter_conf.txt","text":"<pre><code>use_sql_db: yes\n</code></pre>"},{"location":"configuration/imports/#logging-settings","title":"Logging Settings","text":"<p>We want to log all items and all chat messages.</p>"},{"location":"configuration/imports/#confimportlog_conftxt","title":"/conf/import/log_conf.txt","text":"<pre><code>log_filter: 1\n// Log CHAT (Global, Whisper, Party, Guild, Main chat, Clan) (Note 3)\n// log_chat: 63 = logs everything\nlog_chat: 63\n</code></pre>"},{"location":"configuration/imports/#battle-configs","title":"Battle Configs","text":"<p>We want to change the way various mechanics work. For anything that would be configured in the <code>/conf/battle/</code> directory, it will go into <code>import/battle_conf.txt</code>. To help you find which configs came from where, it's generally a good idea to comment out the name of the file that specific collection of configs came from.</p>"},{"location":"configuration/imports/#confimportbattle_conftxt","title":"/conf/import/battle_conf.txt","text":"<pre><code>// guild.conf\nguild_exp_limit: 90\n\n// items.conf\nvending_over_max: no\nvending_tax: 100\nweapon_produce_rate: 200\npotion_produce_rate: 200\nproduce_item_name_input: 0x03\n\n// misc.conf\nduel_time_interval: 2\nat_mapflag: yes\nat_monsterignore: yes\ncashshop_show_points: yes\nhide_fav_sell: yes\n// Whether or not mail box status is displayed upon login.\n// Default: 0\n// 0 = No\n// 1 = Yes\n// 2 = Yes, when there are unread mails\nmail_show_status: 2\n\n// monster.conf\nshow_mob_info: 3\n\n// party.conf\nparty_hp_mode: 1\ndisplay_party_name: yes\n\n// pet.conf\npet_rename: yes\n\n// player.conf\nmax_aspd: 196\nmax_third_aspd: 196\nmax_extended_aspd: 196\nvip_disp_rate: no\n\n// status.conf\ndebuff_on_logout: 3\n</code></pre>"},{"location":"configuration/imports/#achievements","title":"Achievements","text":"<p>We want to add our own custom achievement that can be given to a player via an NPC Script and another that we can give to our GMs.</p>"},{"location":"configuration/imports/#dbimportachievement_dbyml","title":"/db/import/achievement_db.yml","text":"<pre><code>    - Id: 280000\n      Group: None\n      Name: Emperio\n      Reward:\n        TitleId: 1035\n      Score: 50\n    - Id: 280001\n      Group: None\n      Name: Staff\n      Reward:\n        TitleId: 1036\n      Score: 50\n</code></pre>"},{"location":"configuration/imports/#instances","title":"Instances","text":"<p>We want to add our own customized Housing Instance.</p>"},{"location":"configuration/imports/#dbimportinstance_dbyml","title":"/db/import/instance_db.yml","text":"<pre><code>    - Id: 35\n      Name: Home\n      IdleTimeOut: 900\n      Enter:\n        Map: 1@home\n        X: 24\n        Y: 6\n      AdditionalMaps:\n        - Map: 2@home\n        - Map: 3@home\n</code></pre>"},{"location":"configuration/imports/#mob-alias","title":"Mob Alias","text":"<p>We want to make Porings look like Baphomet.</p>"},{"location":"configuration/imports/#dbimportmob_availyml","title":"/db/import/mob_avail.yml","text":"<pre><code>    - Mob: PORING\n      Sprite: BAPHOMET\n</code></pre>"},{"location":"configuration/imports/#custom-maps","title":"Custom Maps","text":"<p>We want to add our own custom maps. For this we need to add our map names to <code>db/import/map_index.txt</code>, <code>import/map_cache.dat</code> and then to the <code>config/import/map_conf.txt</code> file for the Map Server to load.</p>"},{"location":"configuration/imports/#confimportmap_conftxt_1","title":"/conf/import/map_conf.txt","text":"<pre><code>    map: 1@home\n    map: 2@home\n    map: 3@home\n    map: ev_has\n    map: shops\n    map: prt_pvp\n</code></pre>"},{"location":"configuration/imports/#dbimportmap_indextxt","title":"/db/import/map_index.txt","text":"<pre><code>    1@home  1250\n    2@home\n    3@home\n    ev_has\n    shops\n    prt_pvp\n</code></pre>"},{"location":"configuration/imports/#item-trade-restrictions","title":"Item Trade Restrictions","text":"<p>We want to ensure that specific items cannot be traded, sold, dropped, placed in storage, etc.</p>"},{"location":"configuration/imports/#dbimportitem_dbyml","title":"/db/import/item_db.yml","text":"<pre><code>    - Id: 34000 # Old Green Box\n      Trade:\n        NoDrop: true\n        NoTrade: true\n        TradePartner: true\n        NoSell: true\n        NoCart: true\n        NoStorage: true\n        NoGuildStorage: true\n        NoMail: true\n        NoAuction: true\n    - Id: 34001 # House Keys\n      Trade:\n        NoDrop: true\n        NoTrade: true\n        TradePartner: true\n        NoSell: true\n        NoCart: true\n        NoStorage: true\n        NoGuildStorage: true\n        NoMail: true\n        NoAuction: true\n    - Id: 34002 # Reputation Journal\n      Trade:\n        NoDrop: true\n        NoTrade: true\n        TradePartner: true\n        NoSell: true\n        NoCart: true\n        NoStorage: true\n        NoGuildStorage: true\n        NoMail: true\n        NoAuction: true\n</code></pre>"},{"location":"configuration/imports/#custom-quests","title":"Custom Quests","text":"<p>We want to add our own custom quests to the quest_db.</p>"},{"location":"configuration/imports/#dbimportquest_dbyml","title":"/db/import/quest_db.yml","text":"<pre><code>    - Id: 89001\n      Title: \"Reputation Quest\"\n    - Id: 89002\n      Title: \"Reputation Quest\"\n</code></pre> <p>We cannot stress enough how helpful this system is for everyone. The majority of git conflicts will simply go away if users make use of the <code>import/</code> system.</p>"},{"location":"installing/debian/","title":"Debian","text":"<p>This guide covers how to install rAthena on Debian 10. For earlier versions of Debian you may need to alter the list of required packages. Older versions will not be covered in this guide.</p> <p>Code that you should run in your console/SSH application is <code>written like this</code>.</p> <p>This guide covers the installation via CLI and does not include instructions for installing a desktop environment for use with a VNC server.</p>"},{"location":"installing/debian/#pre-requisites","title":"Pre-Requisites","text":""},{"location":"installing/debian/#in-general","title":"In General","text":"<ul> <li>A basic understanding of Linux based Operating Systems.</li> <li>A basic understanding of the SSH tool Putty.</li> <li>A basic understanding of MySQL (or RDBMS in general).</li> <li>A basic understanding of when the root system user should be used, and when you should use a standard user shell.</li> <li>A basic understanding that \"if at first you don't succeed, search the forums\" will be your saving-grace in the event of errors.</li> </ul>"},{"location":"installing/debian/#debian-10","title":"Debian 10","text":"<p>You should ensure that your system is up-to-date by first: <code>apt-get update</code></p>"},{"location":"installing/debian/#installing-requirements","title":"Installing Requirements","text":"<p>We need the following applications to compile rAthena on Debian 10: <pre><code>apt-get install git make libmariadb-dev libmariadbclient-dev libmariadbclient-dev-compat gcc g++ zlib1g-dev libpcre3-dev\n</code></pre> You can install the above applications, and any following applications as root, then we'll switch to a standard user later on in the guide.</p> <p>If you don't feel comfortable editing files in Vim, you should install nano: <pre><code>apt-get install -y nano\n</code></pre></p>"},{"location":"installing/debian/#mysql","title":"MySQL","text":"<p>For the installation instructions of MySQL, please see the relevant installation page.</p>"},{"location":"installing/debian/#the-code-repository","title":"The Code Repository","text":"<p>rAthena uses git for revision control, and hosts the git repository on Github.</p>"},{"location":"installing/debian/#cloning","title":"Cloning","text":"<p>You can obtain the latest version of rAthena by typing the following command. This will place rAthena in a folder called rAthena in your home directory, but you are free to change it to whatever you like:</p> <pre><code>git clone https://github.com/rathena/rathena.git ~/rAthena\n</code></pre>"},{"location":"installing/debian/#updating","title":"Updating","text":"<p>To pull the latest updates for rAthena you can do the following: <pre><code>git pull\n</code></pre></p>"},{"location":"installing/debian/#compile-the-code","title":"Compile The Code","text":"<p>There are several steps you will need to do now in order to run rAthena. You first need to run the \"configure script\" to ensure everything is working as it should, and to build necessary make-files. <pre><code>./configure\n</code></pre></p> <p>The next command is not essential every time you compile, but it helps to ensure caches are removed when compiling. <pre><code>make clean\n</code></pre></p> <p>And then finally, we're going to build the server's code. <pre><code>make server\n</code></pre></p> <p>Potentially, you may need to <code>chmod</code> your server binaries to make them \"executable\". <pre><code>chmod a+x login-server &amp;&amp; chmod a+x char-server &amp;&amp; chmod a+x map-server &amp;&amp; chmod a+x web-server\n</code></pre></p>"},{"location":"installing/debian/#recompile-the-code","title":"Recompile The Code","text":"<p>Recompiling is the same as compiling. You can throw the code into a one-liner, if you like. <pre><code>./configure &amp;&amp; make clean &amp;&amp; make server\n</code></pre></p>"},{"location":"installing/debian/#starting-rathena","title":"Starting rAthena","text":"<p>The provided method of running rAthena will work perfectly fine, but this author's personal preference is shown below as an alternative method.</p>"},{"location":"installing/debian/#provided-method","title":"Provided Method","text":"<p>Use the following commands</p> <ul> <li> <p>To Start: <pre><code>./athena-start start\n</code></pre></p> </li> <li> <p>To Stop: <pre><code>./athena-start stop\n</code></pre></p> </li> <li> <p>To Restart: <pre><code>./athena-start restart\n</code></pre></p> </li> </ul> <p>If you receive an error similar to the following: <pre><code>-bash: ./athena-start: /bin/sh^M: bad interpreter\n</code></pre></p> <p>You can install dos2unix with <code>apt-get install dos2unix</code> and then run <code>dos2unix athena-start</code>.</p> <p>You will now be able to use <code>./athena-start start</code> after <code>chmod a+x athena-start</code>.</p>"},{"location":"installing/debian/#alternative-method","title":"Alternative Method","text":"<p>Firstly, install <code>screen</code>: <pre><code>apt-get install -y screen\n</code></pre> You can then keep all your separate consoles running in the background, and call them forward individually whenever you like.</p> <p>First, create the sessions: <pre><code>screen -dmS login\nscreen -dmS char\nscreen -dmS map\nscreen -dmS web\n</code></pre></p> <p>Then you can connect to each one individually like so: <pre><code>screen -r login\n</code></pre> When you are inside the session, <code>cd</code> to your rAthena folder and start the login-server, e.g. <code>cd ~/rAthena &amp;&amp; ./login-server</code>. This should now start the login-server. To detach from the session while keeping the login-server running, you will need to hold down the <code>Ctrl</code> key on your keyboard and then press the <code>A</code> and <code>D</code> keys at the same time. Then, do the same to the other servers. If you want to terminate any of your servers, you will need to resume the session (<code>-r</code>) and then <code>Ctrl</code> + <code>C</code>.</p> <p>To make sure your sessions are still running, you can <code>screen -ls</code> which will output something similar to: <pre><code>[athenauser@vps-ba60c6aa ~]$ screen -ls\nThere are screens on:\n        32121.login      (Detached)\n        4146.web         (Detached)\n        4115.map         (Detached)\n        4088.char        (Detached)\n4 Sockets in /var/run/screen/S-athenauser.\n</code></pre></p>"},{"location":"installing/debian/#connections","title":"Connections","text":"<p>If you've just started your servers and get some errors, don't worry, it's because you haven't configured them yet.</p> <p>We have a handy guide here that will talk you through what you need to change in order to get your servers up and running successfully.</p>"},{"location":"installing/docker/","title":"Docker","text":"<p>This guide covers how to quickly get rAthena running on any OS by using Docker. In depth docker topics will not be covered by this guide.</p> <p>Code that you should run in your console/SSH application is <code>written like this</code>.</p>"},{"location":"installing/docker/#what-is-docker-and-why-use-it-over-a-native-installation","title":"What is Docker and why use it over a native installation?","text":"<p>One of the main benefits of Docker is the ability to replicate your environment, no matter the host OS, as you only need the Docker daemon/engine running and you're good to go.</p>"},{"location":"installing/docker/#pre-requisites","title":"Pre-Requisites","text":""},{"location":"installing/docker/#in-general","title":"In General","text":"<ul> <li>A basic understanding of Linux based Operating Systems.</li> <li>Familiarity with StackOverflow in case anything goes wrong.</li> </ul>"},{"location":"installing/docker/#installing-requirements","title":"Installing Requirements","text":"<p>First, you need to get Docker engine up and running. You can get this done by following the official Docker guides. Once you get to the part where you install <code>docker-compose</code> you're good to go.</p> <p>A few basic commands to remember:</p> <ul> <li> <p><code>docker-compose up -d</code> - This will start all the services defined in <code>docker-compose.yml</code> and detach the terminal. You can run without the <code>-d</code> to keep the logs attached.</p> </li> <li> <p><code>docker-compose down</code> - If you have previously dettached, you can run this command next to the <code>docker-compose.yml</code> file to shut every service down gracefully.</p> </li> <li> <p><code>docker logs &lt;container name&gt;</code> - Will print the last lines of logs of a given container.</p> </li> <li> <p><code>docker ps</code> - Will list all the containers you have running.</p> </li> </ul>"},{"location":"installing/docker/#understanding-the-docker-composeyml","title":"Understanding the docker-compose.yml","text":"<p>In this file you'll find how the magic really happens. Jokes aside, there's no magic, it's kinda easy once you wrap your head around it.</p> <p>Inside the <code>services</code> block, you'll find every <code>service</code> a.k.a <code>container</code> we'll start once we run our <code>up</code> command.</p>"},{"location":"installing/docker/#database","title":"Database","text":"<pre><code>    db: # service name (this is the name docker uses to communicate to this container internally\n        image: \"mariadb:bionic\" # container image (what it will be running)\n        container_name: \"rathena_db\" # the name you'll be using to get logs or bash into\n        ports: # this block will have the ports the container uses to make possible for you to connect to it from the host\n            - \"3306:3306\" # allow DB connections from host\n        volumes:\n            - \"rathenadb:/var/lib/mysql\" # save database to local disk\n            - \"../../sql-files/:/docker-entrypoint-initdb.d\" # initialize db with ./sql-files\n        environment: # environment variables. self-explanatory\n            MYSQL_ROOT_PASSWORD: ragnarok\n            MYSQL_DATABASE: ragnarok\n            MYSQL_USER: ragnarok\n            MYSQL_PASSWORD: ragnarok\n</code></pre>"},{"location":"installing/docker/#builder","title":"Builder","text":"<p>This is a special container we've created so you're able to build the source without much hassle. That's because the other services (map/char/login) will crash and exit as soon as you start them, or if the server was already compiled they will start the server and then you won't be able to finish compiling. <pre><code>    builder:\n        image: \"rathena:local\"\n        container_name: \"rathena-builder\"\n        command: \"/rathena/tools/docker/builder.sh\" # this line will run the file linked once the container has started\n        volumes:\n            - \"../..:/rathena\" # mount git repo directory inside container\n            - \"./asset/inter_conf.txt:/rathena/conf/import/inter_conf.txt\" # load db connection\n            - \"./asset/char_conf.txt:/rathena/conf/import/char_conf.txt\"   # localdev login-char relation\n            - \"./asset/map_conf.txt:/rathena/conf/import/map_conf.txt\"     # localdev char-map relation\n        init: true # helps with signal forwarding and process reaping\n        tty: true\n        stdin_open: true\n        build: # as we don't have an image available on the Docker hub for building and running rAthena, we need to build it ourselves\n            context: .\n            dockerfile: Dockerfile\n        environment:\n            BUILDER_CONFIGURE: \"--enable-packetver=20211103\" # here you can pass whatever you would pass to the `./configure` command\n</code></pre></p>"},{"location":"installing/docker/#logincharmap-servers","title":"Login/Char/Map servers","text":"<p>This part is where we define each of our executables/servers to run independently. The differences between the servers will be the <code>command</code> property which will contain the specific server that container will launch and the <code>depends_on</code> which specifies which other container should be up before initializing. <pre><code>login:\n        image: \"rathena:local\"\n        container_name: \"rathena-login\"\n        command: sh -c \"/bin/wait-for db:3306 -- /rathena/login-server\"\n        ports:\n            - \"6900:6900\" # login server\n        volumes:\n            - \"../..:/rathena\" # mount git repo directory inside container\n            - \"./asset/inter_conf.txt:/rathena/conf/import/inter_conf.txt\" # load db connection\n            - \"./asset/char_conf.txt:/rathena/conf/import/char_conf.txt\"   #localdev login-char relation\n            - \"./asset/map_conf.txt:/rathena/conf/import/map_conf.txt\"     #localdev char-map relation\n        init: true # helps with signal forwarding and process reaping\n        tty: true\n        stdin_open: true\n        build:\n            context: .\n            dockerfile: Dockerfile\n        depends_on:\n            - db\n</code></pre></p>"},{"location":"installing/docker/#setting-up-the-server","title":"Setting up the server","text":"<ol> <li> <p>After cloning the rAthena repo, you should open the project folder in the terminal. In my case I've cloned the project to <code>Documents/Personal/rathena</code>, so I've cd'ed to that folder. </p> </li> <li> <p>Then we can cd into <code>tools/docker</code> and then we can run the best command in the entire world <code>docker-compose up</code>. The very first time we do that command, it will pull the images from Docker hub and then build the server with the parameters specified in the <code>builder</code> service. </p> </li> <li> <p>If we observe the logs, we'll be able to see that the <code>rathena-builder</code> container is yielding a bunch of logs. If you ever compiled with <code>make</code> you'll find those familiar. </p> </li> <li> <p>After a while we can see that the compilation has finished once we see <code>rathena-builder exited with code 0</code>. </p> </li> <li> <p>Now all we need to do is press <code>ctrl+c</code> to stop everything and then <code>docker-compose up</code>. </p> </li> </ol> <p>And that's all there is to it. You've installed one thing on your host computer (a bit more if you count the depdencies to get docker runner) and now you have rAthena running. Once you stop the containers it will be like you never had rAthena running on your machine.</p>"},{"location":"installing/docker/#recompiling","title":"Recompiling","text":"<p>If you make changes to the rAthena src directory, you will need to recompile to apply those changes.</p> <ol> <li> <p>Stop everything by pressing <code>ctrl+c</code> if you haven't dettached with <code>docker-compose up -d</code>.</p> </li> <li> <p>Run <code>docker-compose run builder bash</code>.</p> </li> </ol> <p>This will start the builder container and give you access to its terminal, and from there you can run <code>make</code> commands to build like within any other VPS. Eg:</p> <pre><code>./configure --enable-packetver=20220404 --enable-pre-re --whatever-other-parameter\nmake server\n</code></pre>"},{"location":"installing/docker/#additional-info","title":"Additional info","text":"<p>You can find some more info on the <code>tools/docker</code> README</p>"}]}